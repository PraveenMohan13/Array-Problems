Sort the array elements in descending order according to their frequency of occurrence

Input Format

11
2 2 3 4 5 12 2 3 3 3 12

Constraints

5<=n<=20

Output Format

3 3 3 3 2 2 2 12 12 4 5

Sample Input 0

10
3 3 2 2 2 5 5 5 8 7
Sample Output 0

2 2 2 5 5 5 3 3 7 8
======================================================================================================================================================
#include<stdio.h>
int maximum(int A[],int n){
    int max=A[0];
    for(int i=1;i<n;i++){
        if(A[i]>max){
            max=A[i];
        }
    }
    return max;
}
int minimum(int A[],int n){
    int min=A[0];
    for(int i=1;i<n;i++){
        if(A[i]<min){
            min=A[i];
        }
    }
    return min;
}
void hashing(int A[],int n){
    int max=maximum(A,n);
    int min=minimum(A,n);
    int y=-min;
    int B[max+1+y];
    for(int i=0;i<(max+1+y);i++){
        B[i]=0;
    }
    for(int i=0;i<n;i++){
        int k=A[i];
        B[k+y]++;
    }
    int maxB=maximum(B,max+1+y);
    while(maxB!=0){
        for(int i=0;i<(max+1+y);i++){
            if(B[i]==maxB){
                for(int j=0;j<maxB;j++){
                    printf("%d ",i-y);
                }
            }
        }
        maxB--;
    }
}
int main() {
    int n;
    scanf("%d",&n);
    int A[n];
    for(int i=0;i<n;i++){
        scanf("%d",&A[i]);
    }
    hashing(A,n);
}

-----------------------------------------------
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
int maximum(int A[],int n){
    int max=A[0];
    for(int i=1;i<n;i++){
        if(A[i]>max){
            max=A[i];
        }
    }
    return max;
}
void hashing(int A[],int n){
     int max=maximum(A,n);  //1st
    int B[max+1];
    for(int i=0;i<(max+1);i++){
        B[i]=0;
    }
    for(int i=0;i<n;i++){
        int k=A[i];
        B[k]++;
    }
    int maxB=maximum(B,max+1);
    while(maxB!=0){
         for(int i=0;i<(max+1);i++){
             if(B[i]==maxB){
                 for(int j=0;j<(maxB);j++){
                     printf("%d ",i);
                 }
             }
        
    }
        maxB--;
    }
   
}
int main() {
  int n;
    scanf("%d",&n);
    int A[n];
    for(int i=0;i<n;i++){
        scanf("%d",&A[i]);
    }
   hashing(A,n);
    
}
===============================================================================================================
public class Solution {
    public static void main(String args[] ) throws Exception {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        HashMap<Integer,Integer> mp = new HashMap<>();
        for(int i=0;i<n;i++){
            int num = sc.nextInt();
            if(mp.containsKey(num)) mp.put(num,mp.get(num)+1);
            else mp.put(num,1);
        }
        
        ArrayList<Map.Entry<Integer,Integer>> list = new ArrayList<>(mp.entrySet());
        
        Collections.sort(list, new Comparator <Map.Entry<Integer,Integer>>(){
            
            public int compare(Map.Entry<Integer,Integer> o1, Map.Entry<Integer,Integer> o2){
                return o2.getValue().compareTo(o1.getValue());
            }
        });
        
        HashMap<Integer,Integer> map = new HashMap<>();
        
        for(Map.Entry<Integer,Integer> lst : list){
            map.put(lst.getKey(),lst.getValue());
            for(int i=0;i<lst.getValue();i++) System.out.print(lst.getKey()+" ");
        }       
    }
}
=================================================================================================
class Pair{
        int val;
        int count;
        
        Pair(int val , int count){
            this.val = val;
            this.count = count;
        }
    }

public class Solution {
    
    public static void main(String args[] ) throws Exception {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT */
        
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        
        int arr[] = new int[n];
        
        for(int i =  0 ; i < n ; i++){
            arr[i] = sc.nextInt();
        }
        
        Map<Integer , Integer> map = new HashMap<>();
        
        for(int i : arr){
            map.put(i , map.getOrDefault(i,0)+1);
        }
        //System.out.println(Arrays.toString(arr));
        PriorityQueue<Pair> q = new PriorityQueue<>((a,b) -> a.count != b.count ? b.count - a.count : a.val-b.val);
        
        for(int i : map.keySet()){
          //  System.out.println(i + " " + map.get(i));
            q.add(new Pair(i , map.get(i)));
        }
        //System.out.println(q);
        
        while(!q.isEmpty()){
            Pair v = q.poll();
            for(int i = 0 ; i < v.count ; i++){
                System.out.print(v.val + " ");
            }
        }
    }
}
==========================================================================================================
public class Solution {
    public static void main(String args[] ) throws Exception {
        Scanner s = new Scanner(System.in);
        
        int n = s.nextInt();
        int arr[] = new int[n];
        
        Map<Integer, Integer> map = new HashMap<>();
        List<Integer> res = new ArrayList<>();
        
        for(int i=0; i<n; i++){
            arr[i] = s.nextInt();    
        }
        
        for(int i=0; i<n; i++){
            if(!map.containsKey(arr[i])){
               map.put(arr[i], 1); 
            }
            else{
                map.put(arr[i], map.get(arr[i]) + 1);
            }
            if(!res.contains(map.get(arr[i]))){
                res.add(map.get(arr[i]));
            }
        }
        
        
        for(int i=res.size()-1; i>=0; i--){
            int ele = res.get(i);
            for(Map.Entry<Integer, Integer> k : map.entrySet()){
                if(k.getValue() == ele){
                    for(int z=0; z<ele; z++){
                        System.out.print(k.getKey() + " ");
                    }
                }
            }
        }    
    }
}
====================================================================================
int main() {
    int n;
    cin >> n;
    vector<int> arr(n);
    for(int i=0; i<n; i++)
        cin >> arr[i];
    map<int, int> freq;
    for(int i: arr)
        freq[i]++;
    int m = freq.size();
    vector<int> num;
    for(auto i: freq) {
        num.push_back(i.first);
    }
    for(int i=0; i<m; i++) {
        for(int j=i+1; j<m; j++) {
            if(freq[num[i]] < freq[num[j]]) {
                int temp = num[i];
                num[i] = num[j];
                num[j] = temp;
            } else if(freq[num[i]] == freq[num[j]]) {
                if(num[i] > num[j]) {
                    int temp = num[i];
                    num[i] = num[j];
                    num[j] = temp;
                }
            }
        }
    }
    for(int i: num) {
        for(int j=0; j<freq[i]; j++)
            cout << i << " ";
    }
    return 0;
}
================================================================================
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {
    public static void main(String args[] ) throws Exception {
        Scanner s=new Scanner(System.in);
        int a=s.nextInt();
        int arr[]=new int[a];
        HashMap<Integer,Integer> map=new HashMap<>();
        for(int i=0;i<a;i++){
            arr[i]=s.nextInt();
            map.put(arr[i],map.getOrDefault(arr[i],0)+1);
        }
        PriorityQueue<int[]> pq=new PriorityQueue<>((x,y)->x[1]==y[1]?x[0]-y[0]:y[1]-x[1]);
        for(Map.Entry<Integer,Integer> hm:map.entrySet()){
            pq.offer(new int[]{hm.getKey(),hm.getValue()});
        }
        while(!pq.isEmpty()){
            int ar[]=pq.poll();
            for(int i=0;i<ar[1];i++){
                System.out.print(ar[0]+" ");
            }
        }
    }
}
======================================================================================
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {
    public static void main(String args[] ) throws Exception {
        HashMap<Integer,Integer> map = new  HashMap<>();
        Scanner s = new Scanner(System.in);
        int n=s.nextInt();
        int a[]=new int[n];
        for(int i=0;i<n;i++)
        {
            a[i]=s.nextInt();
        }
        Arrays.sort(a);
        for(int i=0;i<n;i++)
        {
            map.put(a[i],map.getOrDefault(a[i],0)+1);
        }
        
        List<Integer> list = new ArrayList<>();
        for(int num:a)
        {
            list.add(num);
        }
        
        Collections.sort(list,(b,c)->{
            int freq=map.get(c)-map.get(b);
            if(freq==0)
            {
                return b-c;
            }
            return freq;
        });
        for(int num:list)
        {
            System.out.print(num+" ");
        }
    }
}
==================================================================
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {
    public static void main(String args[] ) throws Exception {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT */
        Scanner obj=new Scanner(System.in);
        int a=obj.nextInt();
        int arr[]=new int[a];
        for(int i=0;i<a;i++)
        {
            arr[i]=obj.nextInt();
        }
        HashMap<Integer,Integer>hm=new HashMap<>();
        for(int i=0;i<a;i++)
        {
            if(hm.containsKey(arr[i]))
            {
                hm.put(arr[i],hm.get(arr[i])+1);
            }
            else
            hm.put(arr[i],1);
        }
        for(int i=0;i<a;i++)
        {
            for(int j=i+1;j<a;j++)
            {
                int f1=hm.get(arr[i]);
                int f2=hm.get(arr[j]);
                if(f1<f2||(f1==f2&&arr[j]<arr[i]))
                {
                    int temp=arr[i];
                    arr[i]=arr[j];
                    arr[j]=temp;
                }
            }
            
        }
        for(int ch:arr)
        {
            System.out.print(ch+" ");
        }
    }
}
